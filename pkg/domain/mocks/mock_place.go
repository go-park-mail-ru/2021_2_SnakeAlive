// Code generated by MockGen. DO NOT EDIT.
// Source: place.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	domain "snakealive/m/pkg/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockPlaceStorage is a mock of PlaceStorage interface.
type MockPlaceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceStorageMockRecorder
}

// MockPlaceStorageMockRecorder is the mock recorder for MockPlaceStorage.
type MockPlaceStorageMockRecorder struct {
	mock *MockPlaceStorage
}

// NewMockPlaceStorage creates a new mock instance.
func NewMockPlaceStorage(ctrl *gomock.Controller) *MockPlaceStorage {
	mock := &MockPlaceStorage{ctrl: ctrl}
	mock.recorder = &MockPlaceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceStorage) EXPECT() *MockPlaceStorageMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockPlaceStorage) GetById(id int) (domain.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(domain.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockPlaceStorageMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockPlaceStorage)(nil).GetById), id)
}

// GetPlacesByCountry mocks base method.
func (m *MockPlaceStorage) GetPlacesByCountry(value string) (domain.TopPlaces, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlacesByCountry", value)
	ret0, _ := ret[0].(domain.TopPlaces)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlacesByCountry indicates an expected call of GetPlacesByCountry.
func (mr *MockPlaceStorageMockRecorder) GetPlacesByCountry(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlacesByCountry", reflect.TypeOf((*MockPlaceStorage)(nil).GetPlacesByCountry), value)
}

// MockPlaceUseCase is a mock of PlaceUseCase interface.
type MockPlaceUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceUseCaseMockRecorder
}

// MockPlaceUseCaseMockRecorder is the mock recorder for MockPlaceUseCase.
type MockPlaceUseCaseMockRecorder struct {
	mock *MockPlaceUseCase
}

// NewMockPlaceUseCase creates a new mock instance.
func NewMockPlaceUseCase(ctrl *gomock.Controller) *MockPlaceUseCase {
	mock := &MockPlaceUseCase{ctrl: ctrl}
	mock.recorder = &MockPlaceUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceUseCase) EXPECT() *MockPlaceUseCaseMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockPlaceUseCase) GetById(id int) (domain.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(domain.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockPlaceUseCaseMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockPlaceUseCase)(nil).GetById), id)
}

// GetPlacesByCountry mocks base method.
func (m *MockPlaceUseCase) GetPlacesByCountry(value string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlacesByCountry", value)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlacesByCountry indicates an expected call of GetPlacesByCountry.
func (mr *MockPlaceUseCaseMockRecorder) GetPlacesByCountry(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlacesByCountry", reflect.TypeOf((*MockPlaceUseCase)(nil).GetPlacesByCountry), value)
}

// GetSight mocks base method.
func (m *MockPlaceUseCase) GetSight(sight domain.Place) (int, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSight", sight)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// GetSight indicates an expected call of GetSight.
func (mr *MockPlaceUseCaseMockRecorder) GetSight(sight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSight", reflect.TypeOf((*MockPlaceUseCase)(nil).GetSight), sight)
}

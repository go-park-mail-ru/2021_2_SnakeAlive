// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/services/review/api.proto

package review_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Review with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Review) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Review with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ReviewMultiError, or nil if none found.
func (m *Review) ValidateAll() error {
	return m.validate(true)
}

func (m *Review) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Text

	// no validation rules for Rating

	// no validation rules for UserId

	// no validation rules for PlaceId

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return ReviewMultiError(errors)
	}
	return nil
}

// ReviewMultiError is an error wrapping multiple validation errors returned by
// Review.ValidateAll() if the designated constraints aren't met.
type ReviewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewMultiError) AllErrors() []error { return m }

// ReviewValidationError is the validation error returned by Review.Validate if
// the designated constraints aren't met.
type ReviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewValidationError) ErrorName() string { return "ReviewValidationError" }

// Error satisfies the builtin error interface
func (e ReviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewValidationError{}

// Validate checks the field values on ReviewRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReviewRequestMultiError, or
// nil if none found.
func (m *ReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlaceId

	// no validation rules for UserId

	// no validation rules for Limit

	// no validation rules for Skip

	if len(errors) > 0 {
		return ReviewRequestMultiError(errors)
	}
	return nil
}

// ReviewRequestMultiError is an error wrapping multiple validation errors
// returned by ReviewRequest.ValidateAll() if the designated constraints
// aren't met.
type ReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewRequestMultiError) AllErrors() []error { return m }

// ReviewRequestValidationError is the validation error returned by
// ReviewRequest.Validate if the designated constraints aren't met.
type ReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewRequestValidationError) ErrorName() string { return "ReviewRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewRequestValidationError{}

// Validate checks the field values on AddReviewRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddReviewRequestMultiError, or nil if none found.
func (m *AddReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReview()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddReviewRequestValidationError{
					field:  "Review",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddReviewRequestValidationError{
					field:  "Review",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReview()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddReviewRequestValidationError{
				field:  "Review",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return AddReviewRequestMultiError(errors)
	}
	return nil
}

// AddReviewRequestMultiError is an error wrapping multiple validation errors
// returned by AddReviewRequest.ValidateAll() if the designated constraints
// aren't met.
type AddReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddReviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddReviewRequestMultiError) AllErrors() []error { return m }

// AddReviewRequestValidationError is the validation error returned by
// AddReviewRequest.Validate if the designated constraints aren't met.
type AddReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddReviewRequestValidationError) ErrorName() string { return "AddReviewRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddReviewRequestValidationError{}

// Validate checks the field values on DeleteReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReviewRequestMultiError, or nil if none found.
func (m *DeleteReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReviewId

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteReviewRequestMultiError(errors)
	}
	return nil
}

// DeleteReviewRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReviewRequestMultiError) AllErrors() []error { return m }

// DeleteReviewRequestValidationError is the validation error returned by
// DeleteReviewRequest.Validate if the designated constraints aren't met.
type DeleteReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReviewRequestValidationError) ErrorName() string {
	return "DeleteReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReviewRequestValidationError{}

// Validate checks the field values on Reviews with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reviews) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reviews with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ReviewsMultiError, or nil if none found.
func (m *Reviews) ValidateAll() error {
	return m.validate(true)
}

func (m *Reviews) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReviews() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReviewsValidationError{
						field:  fmt.Sprintf("Reviews[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReviewsValidationError{
						field:  fmt.Sprintf("Reviews[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReviewsValidationError{
					field:  fmt.Sprintf("Reviews[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReviewsMultiError(errors)
	}
	return nil
}

// ReviewsMultiError is an error wrapping multiple validation errors returned
// by Reviews.ValidateAll() if the designated constraints aren't met.
type ReviewsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewsMultiError) AllErrors() []error { return m }

// ReviewsValidationError is the validation error returned by Reviews.Validate
// if the designated constraints aren't met.
type ReviewsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewsValidationError) ErrorName() string { return "ReviewsValidationError" }

// Error satisfies the builtin error interface
func (e ReviewsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviews.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewsValidationError{}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package review_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReviewServiceClient is the client API for ReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewServiceClient interface {
	ReviewByPlace(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*Reviews, error)
	Add(ctx context.Context, in *AddReviewRequest, opts ...grpc.CallOption) (*Review, error)
	Delete(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAmountOfReviewsBySight(ctx context.Context, in *AmountRequest, opts ...grpc.CallOption) (*Amount, error)
}

type reviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewServiceClient(cc grpc.ClientConnInterface) ReviewServiceClient {
	return &reviewServiceClient{cc}
}

func (c *reviewServiceClient) ReviewByPlace(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*Reviews, error) {
	out := new(Reviews)
	err := c.cc.Invoke(ctx, "/services.review_service.ReviewService/ReviewByPlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) Add(ctx context.Context, in *AddReviewRequest, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, "/services.review_service.ReviewService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) Delete(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/services.review_service.ReviewService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) GetAmountOfReviewsBySight(ctx context.Context, in *AmountRequest, opts ...grpc.CallOption) (*Amount, error) {
	out := new(Amount)
	err := c.cc.Invoke(ctx, "/services.review_service.ReviewService/GetAmountOfReviewsBySight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewServiceServer is the server API for ReviewService service.
// All implementations must embed UnimplementedReviewServiceServer
// for forward compatibility
type ReviewServiceServer interface {
	ReviewByPlace(context.Context, *ReviewRequest) (*Reviews, error)
	Add(context.Context, *AddReviewRequest) (*Review, error)
	Delete(context.Context, *DeleteReviewRequest) (*empty.Empty, error)
	GetAmountOfReviewsBySight(context.Context, *AmountRequest) (*Amount, error)
	mustEmbedUnimplementedReviewServiceServer()
}

// UnimplementedReviewServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReviewServiceServer struct {
}

func (UnimplementedReviewServiceServer) ReviewByPlace(context.Context, *ReviewRequest) (*Reviews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewByPlace not implemented")
}
func (UnimplementedReviewServiceServer) Add(context.Context, *AddReviewRequest) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedReviewServiceServer) Delete(context.Context, *DeleteReviewRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedReviewServiceServer) GetAmountOfReviewsBySight(context.Context, *AmountRequest) (*Amount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmountOfReviewsBySight not implemented")
}
func (UnimplementedReviewServiceServer) mustEmbedUnimplementedReviewServiceServer() {}

// UnsafeReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewServiceServer will
// result in compilation errors.
type UnsafeReviewServiceServer interface {
	mustEmbedUnimplementedReviewServiceServer()
}

func RegisterReviewServiceServer(s grpc.ServiceRegistrar, srv ReviewServiceServer) {
	s.RegisterService(&ReviewService_ServiceDesc, srv)
}

func _ReviewService_ReviewByPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).ReviewByPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.review_service.ReviewService/ReviewByPlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).ReviewByPlace(ctx, req.(*ReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.review_service.ReviewService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).Add(ctx, req.(*AddReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.review_service.ReviewService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).Delete(ctx, req.(*DeleteReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_GetAmountOfReviewsBySight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).GetAmountOfReviewsBySight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.review_service.ReviewService/GetAmountOfReviewsBySight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).GetAmountOfReviewsBySight(ctx, req.(*AmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReviewService_ServiceDesc is the grpc.ServiceDesc for ReviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.review_service.ReviewService",
	HandlerType: (*ReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReviewByPlace",
			Handler:    _ReviewService_ReviewByPlace_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _ReviewService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ReviewService_Delete_Handler,
		},
		{
			MethodName: "GetAmountOfReviewsBySight",
			Handler:    _ReviewService_GetAmountOfReviewsBySight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/services/review/api.proto",
}

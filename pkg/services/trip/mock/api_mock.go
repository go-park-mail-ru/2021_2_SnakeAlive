// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/trip/api_grpc.pb.go

// Package mock_trip_service is a generated GoMock package.
package mock_trip_service

import (
	context "context"
	reflect "reflect"
	trip_service "snakealive/m/pkg/services/trip"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockTripServiceClient is a mock of TripServiceClient interface.
type MockTripServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTripServiceClientMockRecorder
}

// MockTripServiceClientMockRecorder is the mock recorder for MockTripServiceClient.
type MockTripServiceClientMockRecorder struct {
	mock *MockTripServiceClient
}

// NewMockTripServiceClient creates a new mock instance.
func NewMockTripServiceClient(ctrl *gomock.Controller) *MockTripServiceClient {
	mock := &MockTripServiceClient{ctrl: ctrl}
	mock.recorder = &MockTripServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTripServiceClient) EXPECT() *MockTripServiceClientMockRecorder {
	return m.recorder
}

// AddAlbum mocks base method.
func (m *MockTripServiceClient) AddAlbum(ctx context.Context, in *trip_service.ModifyAlbumRequest, opts ...grpc.CallOption) (*trip_service.Album, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAlbum", varargs...)
	ret0, _ := ret[0].(*trip_service.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAlbum indicates an expected call of AddAlbum.
func (mr *MockTripServiceClientMockRecorder) AddAlbum(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAlbum", reflect.TypeOf((*MockTripServiceClient)(nil).AddAlbum), varargs...)
}

// AddTrip mocks base method.
func (m *MockTripServiceClient) AddTrip(ctx context.Context, in *trip_service.ModifyTripRequest, opts ...grpc.CallOption) (*trip_service.Trip, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTrip", varargs...)
	ret0, _ := ret[0].(*trip_service.Trip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTrip indicates an expected call of AddTrip.
func (mr *MockTripServiceClientMockRecorder) AddTrip(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrip", reflect.TypeOf((*MockTripServiceClient)(nil).AddTrip), varargs...)
}

// AddTripUser mocks base method.
func (m *MockTripServiceClient) AddTripUser(ctx context.Context, in *trip_service.AddTripUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTripUser", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTripUser indicates an expected call of AddTripUser.
func (mr *MockTripServiceClientMockRecorder) AddTripUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTripUser", reflect.TypeOf((*MockTripServiceClient)(nil).AddTripUser), varargs...)
}

// AddUserByLink mocks base method.
func (m *MockTripServiceClient) AddUserByLink(ctx context.Context, in *trip_service.AddByShareRequest, opts ...grpc.CallOption) (*trip_service.Link, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUserByLink", varargs...)
	ret0, _ := ret[0].(*trip_service.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserByLink indicates an expected call of AddUserByLink.
func (mr *MockTripServiceClientMockRecorder) AddUserByLink(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserByLink", reflect.TypeOf((*MockTripServiceClient)(nil).AddUserByLink), varargs...)
}

// DeleteAlbum mocks base method.
func (m *MockTripServiceClient) DeleteAlbum(ctx context.Context, in *trip_service.AlbumRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAlbum", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlbum indicates an expected call of DeleteAlbum.
func (mr *MockTripServiceClientMockRecorder) DeleteAlbum(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlbum", reflect.TypeOf((*MockTripServiceClient)(nil).DeleteAlbum), varargs...)
}

// DeleteTrip mocks base method.
func (m *MockTripServiceClient) DeleteTrip(ctx context.Context, in *trip_service.TripRequest, opts ...grpc.CallOption) (*trip_service.Users, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrip", varargs...)
	ret0, _ := ret[0].(*trip_service.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrip indicates an expected call of DeleteTrip.
func (mr *MockTripServiceClientMockRecorder) DeleteTrip(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrip", reflect.TypeOf((*MockTripServiceClient)(nil).DeleteTrip), varargs...)
}

// GetAlbum mocks base method.
func (m *MockTripServiceClient) GetAlbum(ctx context.Context, in *trip_service.AlbumRequest, opts ...grpc.CallOption) (*trip_service.Album, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlbum", varargs...)
	ret0, _ := ret[0].(*trip_service.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbum indicates an expected call of GetAlbum.
func (mr *MockTripServiceClientMockRecorder) GetAlbum(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbum", reflect.TypeOf((*MockTripServiceClient)(nil).GetAlbum), varargs...)
}

// GetAlbumsByUser mocks base method.
func (m *MockTripServiceClient) GetAlbumsByUser(ctx context.Context, in *trip_service.ByUserRequest, opts ...grpc.CallOption) (*trip_service.Albums, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlbumsByUser", varargs...)
	ret0, _ := ret[0].(*trip_service.Albums)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumsByUser indicates an expected call of GetAlbumsByUser.
func (mr *MockTripServiceClientMockRecorder) GetAlbumsByUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumsByUser", reflect.TypeOf((*MockTripServiceClient)(nil).GetAlbumsByUser), varargs...)
}

// GetTrip mocks base method.
func (m *MockTripServiceClient) GetTrip(ctx context.Context, in *trip_service.TripRequest, opts ...grpc.CallOption) (*trip_service.Trip, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrip", varargs...)
	ret0, _ := ret[0].(*trip_service.Trip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrip indicates an expected call of GetTrip.
func (mr *MockTripServiceClientMockRecorder) GetTrip(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrip", reflect.TypeOf((*MockTripServiceClient)(nil).GetTrip), varargs...)
}

// GetTripsByUser mocks base method.
func (m *MockTripServiceClient) GetTripsByUser(ctx context.Context, in *trip_service.ByUserRequest, opts ...grpc.CallOption) (*trip_service.Trips, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTripsByUser", varargs...)
	ret0, _ := ret[0].(*trip_service.Trips)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTripsByUser indicates an expected call of GetTripsByUser.
func (mr *MockTripServiceClientMockRecorder) GetTripsByUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTripsByUser", reflect.TypeOf((*MockTripServiceClient)(nil).GetTripsByUser), varargs...)
}

// ShareLink mocks base method.
func (m *MockTripServiceClient) ShareLink(ctx context.Context, in *trip_service.ShareRequest, opts ...grpc.CallOption) (*trip_service.Link, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ShareLink", varargs...)
	ret0, _ := ret[0].(*trip_service.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShareLink indicates an expected call of ShareLink.
func (mr *MockTripServiceClientMockRecorder) ShareLink(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareLink", reflect.TypeOf((*MockTripServiceClient)(nil).ShareLink), varargs...)
}

// SightsByTrip mocks base method.
func (m *MockTripServiceClient) SightsByTrip(ctx context.Context, in *trip_service.SightsRequest, opts ...grpc.CallOption) (*trip_service.Sights, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SightsByTrip", varargs...)
	ret0, _ := ret[0].(*trip_service.Sights)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SightsByTrip indicates an expected call of SightsByTrip.
func (mr *MockTripServiceClientMockRecorder) SightsByTrip(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SightsByTrip", reflect.TypeOf((*MockTripServiceClient)(nil).SightsByTrip), varargs...)
}

// UpdateAlbum mocks base method.
func (m *MockTripServiceClient) UpdateAlbum(ctx context.Context, in *trip_service.ModifyAlbumRequest, opts ...grpc.CallOption) (*trip_service.Album, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAlbum", varargs...)
	ret0, _ := ret[0].(*trip_service.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAlbum indicates an expected call of UpdateAlbum.
func (mr *MockTripServiceClientMockRecorder) UpdateAlbum(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlbum", reflect.TypeOf((*MockTripServiceClient)(nil).UpdateAlbum), varargs...)
}

// UpdateTrip mocks base method.
func (m *MockTripServiceClient) UpdateTrip(ctx context.Context, in *trip_service.ModifyTripRequest, opts ...grpc.CallOption) (*trip_service.Trip, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrip", varargs...)
	ret0, _ := ret[0].(*trip_service.Trip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrip indicates an expected call of UpdateTrip.
func (mr *MockTripServiceClientMockRecorder) UpdateTrip(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrip", reflect.TypeOf((*MockTripServiceClient)(nil).UpdateTrip), varargs...)
}

// MockTripServiceServer is a mock of TripServiceServer interface.
type MockTripServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTripServiceServerMockRecorder
}

// MockTripServiceServerMockRecorder is the mock recorder for MockTripServiceServer.
type MockTripServiceServerMockRecorder struct {
	mock *MockTripServiceServer
}

// NewMockTripServiceServer creates a new mock instance.
func NewMockTripServiceServer(ctrl *gomock.Controller) *MockTripServiceServer {
	mock := &MockTripServiceServer{ctrl: ctrl}
	mock.recorder = &MockTripServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTripServiceServer) EXPECT() *MockTripServiceServerMockRecorder {
	return m.recorder
}

// AddAlbum mocks base method.
func (m *MockTripServiceServer) AddAlbum(arg0 context.Context, arg1 *trip_service.ModifyAlbumRequest) (*trip_service.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAlbum", arg0, arg1)
	ret0, _ := ret[0].(*trip_service.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAlbum indicates an expected call of AddAlbum.
func (mr *MockTripServiceServerMockRecorder) AddAlbum(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAlbum", reflect.TypeOf((*MockTripServiceServer)(nil).AddAlbum), arg0, arg1)
}

// AddTrip mocks base method.
func (m *MockTripServiceServer) AddTrip(arg0 context.Context, arg1 *trip_service.ModifyTripRequest) (*trip_service.Trip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrip", arg0, arg1)
	ret0, _ := ret[0].(*trip_service.Trip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTrip indicates an expected call of AddTrip.
func (mr *MockTripServiceServerMockRecorder) AddTrip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrip", reflect.TypeOf((*MockTripServiceServer)(nil).AddTrip), arg0, arg1)
}

// AddTripUser mocks base method.
func (m *MockTripServiceServer) AddTripUser(arg0 context.Context, arg1 *trip_service.AddTripUserRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTripUser", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTripUser indicates an expected call of AddTripUser.
func (mr *MockTripServiceServerMockRecorder) AddTripUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTripUser", reflect.TypeOf((*MockTripServiceServer)(nil).AddTripUser), arg0, arg1)
}

// AddUserByLink mocks base method.
func (m *MockTripServiceServer) AddUserByLink(arg0 context.Context, arg1 *trip_service.AddByShareRequest) (*trip_service.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserByLink", arg0, arg1)
	ret0, _ := ret[0].(*trip_service.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserByLink indicates an expected call of AddUserByLink.
func (mr *MockTripServiceServerMockRecorder) AddUserByLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserByLink", reflect.TypeOf((*MockTripServiceServer)(nil).AddUserByLink), arg0, arg1)
}

// DeleteAlbum mocks base method.
func (m *MockTripServiceServer) DeleteAlbum(arg0 context.Context, arg1 *trip_service.AlbumRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlbum", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlbum indicates an expected call of DeleteAlbum.
func (mr *MockTripServiceServerMockRecorder) DeleteAlbum(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlbum", reflect.TypeOf((*MockTripServiceServer)(nil).DeleteAlbum), arg0, arg1)
}

// DeleteTrip mocks base method.
func (m *MockTripServiceServer) DeleteTrip(arg0 context.Context, arg1 *trip_service.TripRequest) (*trip_service.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrip", arg0, arg1)
	ret0, _ := ret[0].(*trip_service.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrip indicates an expected call of DeleteTrip.
func (mr *MockTripServiceServerMockRecorder) DeleteTrip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrip", reflect.TypeOf((*MockTripServiceServer)(nil).DeleteTrip), arg0, arg1)
}

// GetAlbum mocks base method.
func (m *MockTripServiceServer) GetAlbum(arg0 context.Context, arg1 *trip_service.AlbumRequest) (*trip_service.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbum", arg0, arg1)
	ret0, _ := ret[0].(*trip_service.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbum indicates an expected call of GetAlbum.
func (mr *MockTripServiceServerMockRecorder) GetAlbum(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbum", reflect.TypeOf((*MockTripServiceServer)(nil).GetAlbum), arg0, arg1)
}

// GetAlbumsByUser mocks base method.
func (m *MockTripServiceServer) GetAlbumsByUser(arg0 context.Context, arg1 *trip_service.ByUserRequest) (*trip_service.Albums, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumsByUser", arg0, arg1)
	ret0, _ := ret[0].(*trip_service.Albums)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumsByUser indicates an expected call of GetAlbumsByUser.
func (mr *MockTripServiceServerMockRecorder) GetAlbumsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumsByUser", reflect.TypeOf((*MockTripServiceServer)(nil).GetAlbumsByUser), arg0, arg1)
}

// GetTrip mocks base method.
func (m *MockTripServiceServer) GetTrip(arg0 context.Context, arg1 *trip_service.TripRequest) (*trip_service.Trip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrip", arg0, arg1)
	ret0, _ := ret[0].(*trip_service.Trip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrip indicates an expected call of GetTrip.
func (mr *MockTripServiceServerMockRecorder) GetTrip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrip", reflect.TypeOf((*MockTripServiceServer)(nil).GetTrip), arg0, arg1)
}

// GetTripsByUser mocks base method.
func (m *MockTripServiceServer) GetTripsByUser(arg0 context.Context, arg1 *trip_service.ByUserRequest) (*trip_service.Trips, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTripsByUser", arg0, arg1)
	ret0, _ := ret[0].(*trip_service.Trips)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTripsByUser indicates an expected call of GetTripsByUser.
func (mr *MockTripServiceServerMockRecorder) GetTripsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTripsByUser", reflect.TypeOf((*MockTripServiceServer)(nil).GetTripsByUser), arg0, arg1)
}

// ShareLink mocks base method.
func (m *MockTripServiceServer) ShareLink(arg0 context.Context, arg1 *trip_service.ShareRequest) (*trip_service.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareLink", arg0, arg1)
	ret0, _ := ret[0].(*trip_service.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShareLink indicates an expected call of ShareLink.
func (mr *MockTripServiceServerMockRecorder) ShareLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareLink", reflect.TypeOf((*MockTripServiceServer)(nil).ShareLink), arg0, arg1)
}

// SightsByTrip mocks base method.
func (m *MockTripServiceServer) SightsByTrip(arg0 context.Context, arg1 *trip_service.SightsRequest) (*trip_service.Sights, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SightsByTrip", arg0, arg1)
	ret0, _ := ret[0].(*trip_service.Sights)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SightsByTrip indicates an expected call of SightsByTrip.
func (mr *MockTripServiceServerMockRecorder) SightsByTrip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SightsByTrip", reflect.TypeOf((*MockTripServiceServer)(nil).SightsByTrip), arg0, arg1)
}

// UpdateAlbum mocks base method.
func (m *MockTripServiceServer) UpdateAlbum(arg0 context.Context, arg1 *trip_service.ModifyAlbumRequest) (*trip_service.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlbum", arg0, arg1)
	ret0, _ := ret[0].(*trip_service.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAlbum indicates an expected call of UpdateAlbum.
func (mr *MockTripServiceServerMockRecorder) UpdateAlbum(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlbum", reflect.TypeOf((*MockTripServiceServer)(nil).UpdateAlbum), arg0, arg1)
}

// UpdateTrip mocks base method.
func (m *MockTripServiceServer) UpdateTrip(arg0 context.Context, arg1 *trip_service.ModifyTripRequest) (*trip_service.Trip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrip", arg0, arg1)
	ret0, _ := ret[0].(*trip_service.Trip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrip indicates an expected call of UpdateTrip.
func (mr *MockTripServiceServerMockRecorder) UpdateTrip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrip", reflect.TypeOf((*MockTripServiceServer)(nil).UpdateTrip), arg0, arg1)
}

// mustEmbedUnimplementedTripServiceServer mocks base method.
func (m *MockTripServiceServer) mustEmbedUnimplementedTripServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTripServiceServer")
}

// mustEmbedUnimplementedTripServiceServer indicates an expected call of mustEmbedUnimplementedTripServiceServer.
func (mr *MockTripServiceServerMockRecorder) mustEmbedUnimplementedTripServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTripServiceServer", reflect.TypeOf((*MockTripServiceServer)(nil).mustEmbedUnimplementedTripServiceServer))
}

// MockUnsafeTripServiceServer is a mock of UnsafeTripServiceServer interface.
type MockUnsafeTripServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTripServiceServerMockRecorder
}

// MockUnsafeTripServiceServerMockRecorder is the mock recorder for MockUnsafeTripServiceServer.
type MockUnsafeTripServiceServerMockRecorder struct {
	mock *MockUnsafeTripServiceServer
}

// NewMockUnsafeTripServiceServer creates a new mock instance.
func NewMockUnsafeTripServiceServer(ctrl *gomock.Controller) *MockUnsafeTripServiceServer {
	mock := &MockUnsafeTripServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTripServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTripServiceServer) EXPECT() *MockUnsafeTripServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTripServiceServer mocks base method.
func (m *MockUnsafeTripServiceServer) mustEmbedUnimplementedTripServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTripServiceServer")
}

// mustEmbedUnimplementedTripServiceServer indicates an expected call of mustEmbedUnimplementedTripServiceServer.
func (mr *MockUnsafeTripServiceServerMockRecorder) mustEmbedUnimplementedTripServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTripServiceServer", reflect.TypeOf((*MockUnsafeTripServiceServer)(nil).mustEmbedUnimplementedTripServiceServer))
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/services/sight/api.proto

package sight_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Sight with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Sight) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sight with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SightMultiError, or nil if none found.
func (m *Sight) ValidateAll() error {
	return m.validate(true)
}

func (m *Sight) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Country

	// no validation rules for Rating

	// no validation rules for Description

	// no validation rules for Lat

	// no validation rules for Lng

	if len(errors) > 0 {
		return SightMultiError(errors)
	}
	return nil
}

// SightMultiError is an error wrapping multiple validation errors returned by
// Sight.ValidateAll() if the designated constraints aren't met.
type SightMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SightMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SightMultiError) AllErrors() []error { return m }

// SightValidationError is the validation error returned by Sight.Validate if
// the designated constraints aren't met.
type SightValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SightValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SightValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SightValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SightValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SightValidationError) ErrorName() string { return "SightValidationError" }

// Error satisfies the builtin error interface
func (e SightValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSight.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SightValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SightValidationError{}

// Validate checks the field values on GetSightsByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSightsByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSightsByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSightsByIDsRequestMultiError, or nil if none found.
func (m *GetSightsByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSightsByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSightsByIDsRequestMultiError(errors)
	}
	return nil
}

// GetSightsByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by GetSightsByIDsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSightsByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSightsByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSightsByIDsRequestMultiError) AllErrors() []error { return m }

// GetSightsByIDsRequestValidationError is the validation error returned by
// GetSightsByIDsRequest.Validate if the designated constraints aren't met.
type GetSightsByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSightsByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSightsByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSightsByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSightsByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSightsByIDsRequestValidationError) ErrorName() string {
	return "GetSightsByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSightsByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSightsByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSightsByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSightsByIDsRequestValidationError{}

// Validate checks the field values on GetSightsByIDsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSightsByIDsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSightsByIDsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSightsByIDsResponseMultiError, or nil if none found.
func (m *GetSightsByIDsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSightsByIDsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSights() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSightsByIDsResponseValidationError{
						field:  fmt.Sprintf("Sights[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSightsByIDsResponseValidationError{
						field:  fmt.Sprintf("Sights[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSightsByIDsResponseValidationError{
					field:  fmt.Sprintf("Sights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSightsByIDsResponseMultiError(errors)
	}
	return nil
}

// GetSightsByIDsResponseMultiError is an error wrapping multiple validation
// errors returned by GetSightsByIDsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSightsByIDsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSightsByIDsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSightsByIDsResponseMultiError) AllErrors() []error { return m }

// GetSightsByIDsResponseValidationError is the validation error returned by
// GetSightsByIDsResponse.Validate if the designated constraints aren't met.
type GetSightsByIDsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSightsByIDsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSightsByIDsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSightsByIDsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSightsByIDsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSightsByIDsResponseValidationError) ErrorName() string {
	return "GetSightsByIDsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSightsByIDsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSightsByIDsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSightsByIDsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSightsByIDsResponseValidationError{}

// Validate checks the field values on GetSightsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSightsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSightsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSightsRequestMultiError, or nil if none found.
func (m *GetSightsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSightsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCountryName()) > 128 {
		err := GetSightsRequestValidationError{
			field:  "CountryName",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCountryName()) < 1 {
		err := GetSightsRequestValidationError{
			field:  "CountryName",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSightsRequestMultiError(errors)
	}
	return nil
}

// GetSightsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSightsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSightsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSightsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSightsRequestMultiError) AllErrors() []error { return m }

// GetSightsRequestValidationError is the validation error returned by
// GetSightsRequest.Validate if the designated constraints aren't met.
type GetSightsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSightsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSightsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSightsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSightsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSightsRequestValidationError) ErrorName() string { return "GetSightsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSightsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSightsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSightsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSightsRequestValidationError{}

// Validate checks the field values on GetSightsReponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSightsReponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSightsReponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSightsReponseMultiError, or nil if none found.
func (m *GetSightsReponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSightsReponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSights() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSightsReponseValidationError{
						field:  fmt.Sprintf("Sights[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSightsReponseValidationError{
						field:  fmt.Sprintf("Sights[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSightsReponseValidationError{
					field:  fmt.Sprintf("Sights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSightsReponseMultiError(errors)
	}
	return nil
}

// GetSightsReponseMultiError is an error wrapping multiple validation errors
// returned by GetSightsReponse.ValidateAll() if the designated constraints
// aren't met.
type GetSightsReponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSightsReponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSightsReponseMultiError) AllErrors() []error { return m }

// GetSightsReponseValidationError is the validation error returned by
// GetSightsReponse.Validate if the designated constraints aren't met.
type GetSightsReponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSightsReponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSightsReponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSightsReponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSightsReponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSightsReponseValidationError) ErrorName() string { return "GetSightsReponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSightsReponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSightsReponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSightsReponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSightsReponseValidationError{}

// Validate checks the field values on GetSightRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSightRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSightRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSightRequestMultiError, or nil if none found.
func (m *GetSightRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSightRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetSightRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSightRequestMultiError(errors)
	}
	return nil
}

// GetSightRequestMultiError is an error wrapping multiple validation errors
// returned by GetSightRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSightRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSightRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSightRequestMultiError) AllErrors() []error { return m }

// GetSightRequestValidationError is the validation error returned by
// GetSightRequest.Validate if the designated constraints aren't met.
type GetSightRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSightRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSightRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSightRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSightRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSightRequestValidationError) ErrorName() string { return "GetSightRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSightRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSightRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSightRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSightRequestValidationError{}

// Validate checks the field values on GetSightResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSightResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSightResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSightResponseMultiError, or nil if none found.
func (m *GetSightResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSightResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSight()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSightResponseValidationError{
					field:  "Sight",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSightResponseValidationError{
					field:  "Sight",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSight()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSightResponseValidationError{
				field:  "Sight",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSightResponseMultiError(errors)
	}
	return nil
}

// GetSightResponseMultiError is an error wrapping multiple validation errors
// returned by GetSightResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSightResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSightResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSightResponseMultiError) AllErrors() []error { return m }

// GetSightResponseValidationError is the validation error returned by
// GetSightResponse.Validate if the designated constraints aren't met.
type GetSightResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSightResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSightResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSightResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSightResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSightResponseValidationError) ErrorName() string { return "GetSightResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSightResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSightResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSightResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSightResponseValidationError{}

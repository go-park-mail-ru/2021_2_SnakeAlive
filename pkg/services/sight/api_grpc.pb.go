// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sight_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SightServiceClient is the client API for SightService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SightServiceClient interface {
	GetSights(ctx context.Context, in *GetSightsRequest, opts ...grpc.CallOption) (*GetSightsReponse, error)
	GetSight(ctx context.Context, in *GetSightRequest, opts ...grpc.CallOption) (*GetSightResponse, error)
}

type sightServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSightServiceClient(cc grpc.ClientConnInterface) SightServiceClient {
	return &sightServiceClient{cc}
}

func (c *sightServiceClient) GetSights(ctx context.Context, in *GetSightsRequest, opts ...grpc.CallOption) (*GetSightsReponse, error) {
	out := new(GetSightsReponse)
	err := c.cc.Invoke(ctx, "/services.sight_service.SightService/GetSights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sightServiceClient) GetSight(ctx context.Context, in *GetSightRequest, opts ...grpc.CallOption) (*GetSightResponse, error) {
	out := new(GetSightResponse)
	err := c.cc.Invoke(ctx, "/services.sight_service.SightService/GetSight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SightServiceServer is the server API for SightService service.
// All implementations must embed UnimplementedSightServiceServer
// for forward compatibility
type SightServiceServer interface {
	GetSights(context.Context, *GetSightsRequest) (*GetSightsReponse, error)
	GetSight(context.Context, *GetSightRequest) (*GetSightResponse, error)
	mustEmbedUnimplementedSightServiceServer()
}

// UnimplementedSightServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSightServiceServer struct {
}

func (UnimplementedSightServiceServer) GetSights(context.Context, *GetSightsRequest) (*GetSightsReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSights not implemented")
}
func (UnimplementedSightServiceServer) GetSight(context.Context, *GetSightRequest) (*GetSightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSight not implemented")
}
func (UnimplementedSightServiceServer) mustEmbedUnimplementedSightServiceServer() {}

// UnsafeSightServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SightServiceServer will
// result in compilation errors.
type UnsafeSightServiceServer interface {
	mustEmbedUnimplementedSightServiceServer()
}

func RegisterSightServiceServer(s grpc.ServiceRegistrar, srv SightServiceServer) {
	s.RegisterService(&SightService_ServiceDesc, srv)
}

func _SightService_GetSights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SightServiceServer).GetSights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.sight_service.SightService/GetSights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SightServiceServer).GetSights(ctx, req.(*GetSightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SightService_GetSight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SightServiceServer).GetSight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.sight_service.SightService/GetSight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SightServiceServer).GetSight(ctx, req.(*GetSightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SightService_ServiceDesc is the grpc.ServiceDesc for SightService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SightService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.sight_service.SightService",
	HandlerType: (*SightServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSights",
			Handler:    _SightService_GetSights_Handler,
		},
		{
			MethodName: "GetSight",
			Handler:    _SightService_GetSight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/services/sight/api.proto",
}

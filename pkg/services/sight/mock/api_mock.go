// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/sight/api_grpc.pb.go

// Package mock_sight_service is a generated GoMock package.
package mock_sight_service

import (
	context "context"
	reflect "reflect"
	sight_service "snakealive/m/pkg/services/sight"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSightServiceClient is a mock of SightServiceClient interface.
type MockSightServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSightServiceClientMockRecorder
}

// MockSightServiceClientMockRecorder is the mock recorder for MockSightServiceClient.
type MockSightServiceClientMockRecorder struct {
	mock *MockSightServiceClient
}

// NewMockSightServiceClient creates a new mock instance.
func NewMockSightServiceClient(ctrl *gomock.Controller) *MockSightServiceClient {
	mock := &MockSightServiceClient{ctrl: ctrl}
	mock.recorder = &MockSightServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSightServiceClient) EXPECT() *MockSightServiceClientMockRecorder {
	return m.recorder
}

// GetRandomTags mocks base method.
func (m *MockSightServiceClient) GetRandomTags(ctx context.Context, in *sight_service.GetTagsRequest, opts ...grpc.CallOption) (*sight_service.GetTagsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRandomTags", varargs...)
	ret0, _ := ret[0].(*sight_service.GetTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomTags indicates an expected call of GetRandomTags.
func (mr *MockSightServiceClientMockRecorder) GetRandomTags(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomTags", reflect.TypeOf((*MockSightServiceClient)(nil).GetRandomTags), varargs...)
}

// GetSight mocks base method.
func (m *MockSightServiceClient) GetSight(ctx context.Context, in *sight_service.GetSightRequest, opts ...grpc.CallOption) (*sight_service.GetSightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSight", varargs...)
	ret0, _ := ret[0].(*sight_service.GetSightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSight indicates an expected call of GetSight.
func (mr *MockSightServiceClientMockRecorder) GetSight(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSight", reflect.TypeOf((*MockSightServiceClient)(nil).GetSight), varargs...)
}

// GetSights mocks base method.
func (m *MockSightServiceClient) GetSights(ctx context.Context, in *sight_service.GetSightsRequest, opts ...grpc.CallOption) (*sight_service.GetSightsReponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSights", varargs...)
	ret0, _ := ret[0].(*sight_service.GetSightsReponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSights indicates an expected call of GetSights.
func (mr *MockSightServiceClientMockRecorder) GetSights(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSights", reflect.TypeOf((*MockSightServiceClient)(nil).GetSights), varargs...)
}

// GetSightsByIDs mocks base method.
func (m *MockSightServiceClient) GetSightsByIDs(ctx context.Context, in *sight_service.GetSightsByIDsRequest, opts ...grpc.CallOption) (*sight_service.GetSightsByIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSightsByIDs", varargs...)
	ret0, _ := ret[0].(*sight_service.GetSightsByIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSightsByIDs indicates an expected call of GetSightsByIDs.
func (mr *MockSightServiceClientMockRecorder) GetSightsByIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSightsByIDs", reflect.TypeOf((*MockSightServiceClient)(nil).GetSightsByIDs), varargs...)
}

// GetSightsByTag mocks base method.
func (m *MockSightServiceClient) GetSightsByTag(ctx context.Context, in *sight_service.GetSightsByTagRequest, opts ...grpc.CallOption) (*sight_service.GetSightsByTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSightsByTag", varargs...)
	ret0, _ := ret[0].(*sight_service.GetSightsByTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSightsByTag indicates an expected call of GetSightsByTag.
func (mr *MockSightServiceClientMockRecorder) GetSightsByTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSightsByTag", reflect.TypeOf((*MockSightServiceClient)(nil).GetSightsByTag), varargs...)
}

// GetTags mocks base method.
func (m *MockSightServiceClient) GetTags(ctx context.Context, in *sight_service.GetTagsRequest, opts ...grpc.CallOption) (*sight_service.GetTagsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTags", varargs...)
	ret0, _ := ret[0].(*sight_service.GetTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockSightServiceClientMockRecorder) GetTags(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockSightServiceClient)(nil).GetTags), varargs...)
}

// SearchSights mocks base method.
func (m *MockSightServiceClient) SearchSights(ctx context.Context, in *sight_service.SearchSightRequest, opts ...grpc.CallOption) (*sight_service.SearchSightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchSights", varargs...)
	ret0, _ := ret[0].(*sight_service.SearchSightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSights indicates an expected call of SearchSights.
func (mr *MockSightServiceClientMockRecorder) SearchSights(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSights", reflect.TypeOf((*MockSightServiceClient)(nil).SearchSights), varargs...)
}

// MockSightServiceServer is a mock of SightServiceServer interface.
type MockSightServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSightServiceServerMockRecorder
}

// MockSightServiceServerMockRecorder is the mock recorder for MockSightServiceServer.
type MockSightServiceServerMockRecorder struct {
	mock *MockSightServiceServer
}

// NewMockSightServiceServer creates a new mock instance.
func NewMockSightServiceServer(ctrl *gomock.Controller) *MockSightServiceServer {
	mock := &MockSightServiceServer{ctrl: ctrl}
	mock.recorder = &MockSightServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSightServiceServer) EXPECT() *MockSightServiceServerMockRecorder {
	return m.recorder
}

// GetRandomTags mocks base method.
func (m *MockSightServiceServer) GetRandomTags(arg0 context.Context, arg1 *sight_service.GetTagsRequest) (*sight_service.GetTagsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomTags", arg0, arg1)
	ret0, _ := ret[0].(*sight_service.GetTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomTags indicates an expected call of GetRandomTags.
func (mr *MockSightServiceServerMockRecorder) GetRandomTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomTags", reflect.TypeOf((*MockSightServiceServer)(nil).GetRandomTags), arg0, arg1)
}

// GetSight mocks base method.
func (m *MockSightServiceServer) GetSight(arg0 context.Context, arg1 *sight_service.GetSightRequest) (*sight_service.GetSightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSight", arg0, arg1)
	ret0, _ := ret[0].(*sight_service.GetSightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSight indicates an expected call of GetSight.
func (mr *MockSightServiceServerMockRecorder) GetSight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSight", reflect.TypeOf((*MockSightServiceServer)(nil).GetSight), arg0, arg1)
}

// GetSights mocks base method.
func (m *MockSightServiceServer) GetSights(arg0 context.Context, arg1 *sight_service.GetSightsRequest) (*sight_service.GetSightsReponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSights", arg0, arg1)
	ret0, _ := ret[0].(*sight_service.GetSightsReponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSights indicates an expected call of GetSights.
func (mr *MockSightServiceServerMockRecorder) GetSights(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSights", reflect.TypeOf((*MockSightServiceServer)(nil).GetSights), arg0, arg1)
}

// GetSightsByIDs mocks base method.
func (m *MockSightServiceServer) GetSightsByIDs(arg0 context.Context, arg1 *sight_service.GetSightsByIDsRequest) (*sight_service.GetSightsByIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSightsByIDs", arg0, arg1)
	ret0, _ := ret[0].(*sight_service.GetSightsByIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSightsByIDs indicates an expected call of GetSightsByIDs.
func (mr *MockSightServiceServerMockRecorder) GetSightsByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSightsByIDs", reflect.TypeOf((*MockSightServiceServer)(nil).GetSightsByIDs), arg0, arg1)
}

// GetSightsByTag mocks base method.
func (m *MockSightServiceServer) GetSightsByTag(arg0 context.Context, arg1 *sight_service.GetSightsByTagRequest) (*sight_service.GetSightsByTagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSightsByTag", arg0, arg1)
	ret0, _ := ret[0].(*sight_service.GetSightsByTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSightsByTag indicates an expected call of GetSightsByTag.
func (mr *MockSightServiceServerMockRecorder) GetSightsByTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSightsByTag", reflect.TypeOf((*MockSightServiceServer)(nil).GetSightsByTag), arg0, arg1)
}

// GetTags mocks base method.
func (m *MockSightServiceServer) GetTags(arg0 context.Context, arg1 *sight_service.GetTagsRequest) (*sight_service.GetTagsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", arg0, arg1)
	ret0, _ := ret[0].(*sight_service.GetTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockSightServiceServerMockRecorder) GetTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockSightServiceServer)(nil).GetTags), arg0, arg1)
}

// SearchSights mocks base method.
func (m *MockSightServiceServer) SearchSights(arg0 context.Context, arg1 *sight_service.SearchSightRequest) (*sight_service.SearchSightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSights", arg0, arg1)
	ret0, _ := ret[0].(*sight_service.SearchSightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSights indicates an expected call of SearchSights.
func (mr *MockSightServiceServerMockRecorder) SearchSights(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSights", reflect.TypeOf((*MockSightServiceServer)(nil).SearchSights), arg0, arg1)
}

// mustEmbedUnimplementedSightServiceServer mocks base method.
func (m *MockSightServiceServer) mustEmbedUnimplementedSightServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSightServiceServer")
}

// mustEmbedUnimplementedSightServiceServer indicates an expected call of mustEmbedUnimplementedSightServiceServer.
func (mr *MockSightServiceServerMockRecorder) mustEmbedUnimplementedSightServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSightServiceServer", reflect.TypeOf((*MockSightServiceServer)(nil).mustEmbedUnimplementedSightServiceServer))
}

// MockUnsafeSightServiceServer is a mock of UnsafeSightServiceServer interface.
type MockUnsafeSightServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSightServiceServerMockRecorder
}

// MockUnsafeSightServiceServerMockRecorder is the mock recorder for MockUnsafeSightServiceServer.
type MockUnsafeSightServiceServerMockRecorder struct {
	mock *MockUnsafeSightServiceServer
}

// NewMockUnsafeSightServiceServer creates a new mock instance.
func NewMockUnsafeSightServiceServer(ctrl *gomock.Controller) *MockUnsafeSightServiceServer {
	mock := &MockUnsafeSightServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSightServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSightServiceServer) EXPECT() *MockUnsafeSightServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSightServiceServer mocks base method.
func (m *MockUnsafeSightServiceServer) mustEmbedUnimplementedSightServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSightServiceServer")
}

// mustEmbedUnimplementedSightServiceServer indicates an expected call of mustEmbedUnimplementedSightServiceServer.
func (mr *MockUnsafeSightServiceServerMockRecorder) mustEmbedUnimplementedSightServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSightServiceServer", reflect.TypeOf((*MockUnsafeSightServiceServer)(nil).mustEmbedUnimplementedSightServiceServer))
}

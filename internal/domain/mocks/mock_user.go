// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	domain "snakealive/m/internal/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockUserStorage) Add(value domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockUserStorageMockRecorder) Add(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUserStorage)(nil).Add), value)
}

// AddAvatar mocks base method.
func (m *MockUserStorage) AddAvatar(id int, avatar string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAvatar", id, avatar)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAvatar indicates an expected call of AddAvatar.
func (mr *MockUserStorageMockRecorder) AddAvatar(id, avatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAvatar", reflect.TypeOf((*MockUserStorage)(nil).AddAvatar), id, avatar)
}

// Delete mocks base method.
func (m *MockUserStorage) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserStorageMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserStorage)(nil).Delete), id)
}

// DeleteByEmail mocks base method.
func (m *MockUserStorage) DeleteByEmail(user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByEmail", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByEmail indicates an expected call of DeleteByEmail.
func (mr *MockUserStorageMockRecorder) DeleteByEmail(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByEmail", reflect.TypeOf((*MockUserStorage)(nil).DeleteByEmail), user)
}

// GetByEmail mocks base method.
func (m *MockUserStorage) GetByEmail(key string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", key)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserStorageMockRecorder) GetByEmail(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserStorage)(nil).GetByEmail), key)
}

// GetById mocks base method.
func (m *MockUserStorage) GetById(id int) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserStorageMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserStorage)(nil).GetById), id)
}

// GetPublicById mocks base method.
func (m *MockUserStorage) GetPublicById(id int) (domain.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicById", id)
	ret0, _ := ret[0].(domain.PublicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicById indicates an expected call of GetPublicById.
func (mr *MockUserStorageMockRecorder) GetPublicById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicById", reflect.TypeOf((*MockUserStorage)(nil).GetPublicById), id)
}

// Update mocks base method.
func (m *MockUserStorage) Update(id int, value domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserStorageMockRecorder) Update(id, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserStorage)(nil).Update), id, value)
}

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockUserUseCase) Add(user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockUserUseCaseMockRecorder) Add(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUserUseCase)(nil).Add), user)
}

// AddAvatar mocks base method.
func (m *MockUserUseCase) AddAvatar(user domain.User, avatar string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAvatar", user, avatar)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAvatar indicates an expected call of AddAvatar.
func (mr *MockUserUseCaseMockRecorder) AddAvatar(user, avatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAvatar", reflect.TypeOf((*MockUserUseCase)(nil).AddAvatar), user, avatar)
}

// Delete mocks base method.
func (m *MockUserUseCase) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserUseCaseMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserUseCase)(nil).Delete), id)
}

// DeleteProfile mocks base method.
func (m *MockUserUseCase) DeleteProfile(hash string, foundUser domain.User) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", hash, foundUser)
	ret0, _ := ret[0].(int)
	return ret0
}

// DeleteProfile indicates an expected call of DeleteProfile.
func (mr *MockUserUseCaseMockRecorder) DeleteProfile(hash, foundUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockUserUseCase)(nil).DeleteProfile), hash, foundUser)
}

// DeleteUserByEmail mocks base method.
func (m *MockUserUseCase) DeleteUserByEmail(user domain.User) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByEmail", user)
	ret0, _ := ret[0].(int)
	return ret0
}

// DeleteUserByEmail indicates an expected call of DeleteUserByEmail.
func (mr *MockUserUseCaseMockRecorder) DeleteUserByEmail(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByEmail", reflect.TypeOf((*MockUserUseCase)(nil).DeleteUserByEmail), user)
}

// GetByEmail mocks base method.
func (m *MockUserUseCase) GetByEmail(key string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", key)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserUseCaseMockRecorder) GetByEmail(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserUseCase)(nil).GetByEmail), key)
}

// GetById mocks base method.
func (m *MockUserUseCase) GetById(id int) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserUseCaseMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserUseCase)(nil).GetById), id)
}

// GetProfile mocks base method.
func (m *MockUserUseCase) GetProfile(hash string, user domain.User) (int, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", hash, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockUserUseCaseMockRecorder) GetProfile(hash, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockUserUseCase)(nil).GetProfile), hash, user)
}

// GetPublicById mocks base method.
func (m *MockUserUseCase) GetPublicById(id int) (domain.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicById", id)
	ret0, _ := ret[0].(domain.PublicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicById indicates an expected call of GetPublicById.
func (mr *MockUserUseCaseMockRecorder) GetPublicById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicById", reflect.TypeOf((*MockUserUseCase)(nil).GetPublicById), id)
}

// Login mocks base method.
func (m *MockUserUseCase) Login(user *domain.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserUseCaseMockRecorder) Login(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUseCase)(nil).Login), user)
}

// Registration mocks base method.
func (m *MockUserUseCase) Registration(user *domain.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Registration indicates an expected call of Registration.
func (mr *MockUserUseCaseMockRecorder) Registration(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockUserUseCase)(nil).Registration), user)
}

// SanitizeUser mocks base method.
func (m *MockUserUseCase) SanitizeUser(user domain.User) domain.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SanitizeUser", user)
	ret0, _ := ret[0].(domain.User)
	return ret0
}

// SanitizeUser indicates an expected call of SanitizeUser.
func (mr *MockUserUseCaseMockRecorder) SanitizeUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SanitizeUser", reflect.TypeOf((*MockUserUseCase)(nil).SanitizeUser), user)
}

// Update mocks base method.
func (m *MockUserUseCase) Update(id int, updatedUser domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, updatedUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserUseCaseMockRecorder) Update(id, updatedUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserUseCase)(nil).Update), id, updatedUser)
}

// UpdateProfile mocks base method.
func (m *MockUserUseCase) UpdateProfile(updatedUser *domain.User, foundUser domain.User, hash string) (int, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", updatedUser, foundUser, hash)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserUseCaseMockRecorder) UpdateProfile(updatedUser, foundUser, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserUseCase)(nil).UpdateProfile), updatedUser, foundUser, hash)
}

// Validate mocks base method.
func (m *MockUserUseCase) Validate(user *domain.User) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockUserUseCaseMockRecorder) Validate(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockUserUseCase)(nil).Validate), user)
}

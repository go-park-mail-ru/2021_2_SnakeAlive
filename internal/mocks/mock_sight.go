// Code generated by MockGen. DO NOT EDIT.
// Source: repostory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "snakealive/m/internal/services/sight/models"

	gomock "github.com/golang/mock/gomock"
)

// MockSightRepository is a mock of SightRepository interface.
type MockSightRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSightRepositoryMockRecorder
}

// MockSightRepositoryMockRecorder is the mock recorder for MockSightRepository.
type MockSightRepositoryMockRecorder struct {
	mock *MockSightRepository
}

// NewMockSightRepository creates a new mock instance.
func NewMockSightRepository(ctrl *gomock.Controller) *MockSightRepository {
	mock := &MockSightRepository{ctrl: ctrl}
	mock.recorder = &MockSightRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSightRepository) EXPECT() *MockSightRepositoryMockRecorder {
	return m.recorder
}

// GetSightByID mocks base method.
func (m *MockSightRepository) GetSightByID(ctx context.Context, id int) (models.Sight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSightByID", ctx, id)
	ret0, _ := ret[0].(models.Sight)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSightByID indicates an expected call of GetSightByID.
func (mr *MockSightRepositoryMockRecorder) GetSightByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSightByID", reflect.TypeOf((*MockSightRepository)(nil).GetSightByID), ctx, id)
}

// GetSightByIDs mocks base method.
func (m *MockSightRepository) GetSightByIDs(ctx context.Context, ids []int64) ([]models.Sight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSightByIDs", ctx, ids)
	ret0, _ := ret[0].([]models.Sight)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSightByIDs indicates an expected call of GetSightByIDs.
func (mr *MockSightRepositoryMockRecorder) GetSightByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSightByIDs", reflect.TypeOf((*MockSightRepository)(nil).GetSightByIDs), ctx, ids)
}

// GetSightByTag mocks base method.
func (m *MockSightRepository) GetSightByTag(ctx context.Context, tag int64) ([]models.Sight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSightByTag", ctx, tag)
	ret0, _ := ret[0].([]models.Sight)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSightByTag indicates an expected call of GetSightByTag.
func (mr *MockSightRepositoryMockRecorder) GetSightByTag(ctx, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSightByTag", reflect.TypeOf((*MockSightRepository)(nil).GetSightByTag), ctx, tag)
}

// GetSightsByCountry mocks base method.
func (m *MockSightRepository) GetSightsByCountry(ctx context.Context, country string) ([]models.Sight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSightsByCountry", ctx, country)
	ret0, _ := ret[0].([]models.Sight)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSightsByCountry indicates an expected call of GetSightsByCountry.
func (mr *MockSightRepositoryMockRecorder) GetSightsByCountry(ctx, country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSightsByCountry", reflect.TypeOf((*MockSightRepository)(nil).GetSightsByCountry), ctx, country)
}

// GetTags mocks base method.
func (m *MockSightRepository) GetTags(ctx context.Context) ([]models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", ctx)
	ret0, _ := ret[0].([]models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockSightRepositoryMockRecorder) GetTags(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockSightRepository)(nil).GetTags), ctx)
}

// SearchSights mocks base method.
func (m *MockSightRepository) SearchSights(ctx context.Context, req *models.SightsSearch) ([]models.Sight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSights", ctx, req)
	ret0, _ := ret[0].([]models.Sight)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSights indicates an expected call of SearchSights.
func (mr *MockSightRepositoryMockRecorder) SearchSights(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSights", reflect.TypeOf((*MockSightRepository)(nil).SearchSights), ctx, req)
}

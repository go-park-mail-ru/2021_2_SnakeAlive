// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "snakealive/m/internal/services/review/models"

	gomock "github.com/golang/mock/gomock"
)

// MockReviewRepository is a mock of ReviewRepository interface.
type MockReviewRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReviewRepositoryMockRecorder
}

// MockReviewRepositoryMockRecorder is the mock recorder for MockReviewRepository.
type MockReviewRepositoryMockRecorder struct {
	mock *MockReviewRepository
}

// NewMockReviewRepository creates a new mock instance.
func NewMockReviewRepository(ctrl *gomock.Controller) *MockReviewRepository {
	mock := &MockReviewRepository{ctrl: ctrl}
	mock.recorder = &MockReviewRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewRepository) EXPECT() *MockReviewRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockReviewRepository) Add(ctx context.Context, value *models.Review, userId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, value, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockReviewRepositoryMockRecorder) Add(ctx, value, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockReviewRepository)(nil).Add), ctx, value, userId)
}

// Delete mocks base method.
func (m *MockReviewRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReviewRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReviewRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockReviewRepository) Get(ctx context.Context, id int) (*models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReviewRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReviewRepository)(nil).Get), ctx, id)
}

// GetListByPlace mocks base method.
func (m *MockReviewRepository) GetListByPlace(ctx context.Context, id, limit, skip int) (*[]models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByPlace", ctx, id, limit, skip)
	ret0, _ := ret[0].(*[]models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByPlace indicates an expected call of GetListByPlace.
func (mr *MockReviewRepositoryMockRecorder) GetListByPlace(ctx, id, limit, skip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByPlace", reflect.TypeOf((*MockReviewRepository)(nil).GetListByPlace), ctx, id, limit, skip)
}

// GetReviewAuthor mocks base method.
func (m *MockReviewRepository) GetReviewAuthor(ctx context.Context, id int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewAuthor", ctx, id)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetReviewAuthor indicates an expected call of GetReviewAuthor.
func (mr *MockReviewRepositoryMockRecorder) GetReviewAuthor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewAuthor", reflect.TypeOf((*MockReviewRepository)(nil).GetReviewAuthor), ctx, id)
}
